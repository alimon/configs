- hosts: all
  vars_files:
    ../vars/vars.yml
  tasks:
    - name: create build workspace
      file:
        path: "{{ build_dir }}"
        state: directory

    - name: install pytorch build requirements (CentOS)
      become: yes
      dnf:
        name:
          - cmake
          - gcc-c++
          - gcc-gfortran
          - lapack-devel
          - make
          - openblas-devel
          - patch
          - python3
          - python3-devel
          - python3-virtualenv
        state: present
        enablerepo: PowerTools
      when: ansible_os_family == 'Red Hat'

    - name: install pytorch build requirements (Debian)
      become: yes
      apt:
        name:
          - cmake
          - g++
          - gfortran
          - liblapack-dev
          - make
          - libblas-dev
          - patch
          - python3
          - python3-dev
          - python3-setuptools
          - python3-venv
        state: present
      when: ansible_os_family == 'Debian'

    - name: fetch pytorch source
      git:
        repo: "https://github.com/pytorch/pytorch.git"
        dest: "{{ build_dir }}/pytorch/"
        depth: 1
        recursive: yes
        force: yes

    - name: install required Python packages
      pip:
        name:
          - Cython
          - dataclasses
          - nose
          - numpy==1.18.*
          - pyyaml
          - wheel
        virtualenv: "{{ build_dir }}/virtualenv"
        virtualenv_command: "/usr/bin/python3 -m venv"
      environment:
        NPY_NUM_BUILD_JOBS: "{{ ansible_processor_vcpus }}"

    - name: build pytorch
      shell:
        cmd: |
          set -xe
          source "{{ build_dir }}/virtualenv/bin/activate"
          USE_CUDA=0 BUILD_CAFFE2_OPS=0 USE_DISTRIBUTED=0 USE_QNNPACK=0 USE_XNNPACK=0 python3 setup.py install
          pip wheel .
        chdir: "{{ build_dir }}/pytorch/"
        creates: "{{ build_dir }}/pytorch/build/"
        executable: /bin/bash

    - name: prepare wheels for publishing
      shell:
        cmd: |
          set -xe
          for pkg in *.whl
          do
            pkgdir=$(echo `basename $pkg`|cut -d'-' -f1 | tr '[:upper:]' '[:lower:]')
            mkdir -p "{{ build_dir }}/out/$pkgdir"
            cp $pkg  "{{ build_dir }}/out/$pkgdir"
          done
        chdir: "{{ build_dir }}/pytorch/"
        creates: "{{ build_dir }}/out/torch/"
        executable: /bin/bash
