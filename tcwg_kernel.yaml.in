- project:
    name: tcwg_kernel-#{TOOLCHAIN}
    toolchain_name: #{TOOLCHAIN}
#if TOOLCHAIN_gnu
    components: binutils gcc linux
    binutils_url: git://sourceware.org/git/binutils-gdb.git
    gcc_url: https://github.com/gcc-mirror/gcc.git
    toolchain_ver:
      - master:
          binutils_branch: master
          gcc_branch: master
      - release:
          binutils_branch: binutils-2_33-branch
          gcc_branch: releases/gcc-9
#elif TOOLCHAIN_llvm
    components: llvm linux
    llvm_url: https://github.com/llvm/llvm-project.git
    toolchain_ver:
      - master:
          llvm_branch: master
      - release:
          llvm_branch: release/10.x
#endif
    target:
      - aarch64
      - arm
    linux:
      - next:
          linux_url: https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
          linux_branch: master
      - mainline:
          linux_url: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
          linux_branch: master
      - stable:
          linux_url: https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          linux_branch: linux-5.4.y
      - lts:
          linux_url: https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          linux_branch: linux-4.19.y
    linux_config:
      - defconfig
      - allmodconfig
      - allyesconfig
      - allnoconfig
    jobs:
      - 'tcwg_kernel-#{TOOLCHAIN}-build-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
      - 'tcwg_kernel-#{TOOLCHAIN}-bisect-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'

- view:
    name: tcwg_kernel-#{TOOLCHAIN}
    view-type: list
    regex: 'tcwg_kernel-#{TOOLCHAIN}.*'

#include tcwg/default.yaml.inc

#include tcwg/round-robin.yaml.inc

- builder:
    name: trigger-followup-builds
    builders:
      - build-name-setter:
          name: 'artifacts/jenkins/build-name'
          file: true
      - shell: |
          #!/bin/bash
          set -ex
          for i in artifacts/trigger-build-* artifacts/trigger-bisect; do
            if [ -f $i ]; then
              echo "ci_project=$ci_project" >> $i
              echo "ci_config=$ci_config" >> $i
              echo "mail_recipients=$mail_recipients" >> $i
              echo "distro=$distro" >> $i
              echo "scripts_branch=$scripts_branch" >> $i
            fi
          done
      - trigger-builds:
          - project: '{rr_project}-build-{ci_project_config}'
            parameter-factories:
              - factory: filebuild
                file-pattern: artifacts/trigger-build-*
          - project: '{rr_project}-bisect-{ci_project_config}'
            property-file: artifacts/trigger-bisect

- job-template:
    name: tcwg_kernel-#{TOOLCHAIN}-build-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}
    project-type: freestyle
    defaults: global
    properties:
      - default-properties
      - build-blocker:
          blocking-jobs:
            - "tcwg_kernel-#{TOOLCHAIN}-bisect-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}"
          queue-scanning: 'ALL'
    parameters:
      - string:
          name: ci_project
          default: 'tcwg_kernel'
          description: "CI project ID; used as namespace for git branches"
      - string:
          name: ci_config
          default: '{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
          description: "CI configuration ID"
#if COMPONENTS_binutils
      - string:
          name: binutils_url
          default: '{binutils_url}'
          description: "binutils git URL"
      - string:
          name: binutils_branch
          default: default
          description: "binutils branch or sha1 to build"
#endif
#if COMPONENTS_gcc
      - string:
          name: gcc_url
          default: '{gcc_url}'
          description: "gcc git URL"
      - string:
          name: gcc_branch
          default: default
          description: "gcc branch or sha1 to build"
#endif
#if COMPONENTS_llvm
      - string:
          name: llvm_url
          default: '{llvm_url}'
          description: "llvm git URL"
      - string:
          name: llvm_branch
          default: default
          description: "llvm branch or sha1 to build"
#endif
#if COMPONENTS_linux
      - string:
          name: linux_url
          default: '{linux_url}'
          description: "linux git URL"
      - string:
          name: linux_branch
          default: default
          description: "linux branch or sha1 to build"
#endif
      - choice:
          name: update_baseline
          choices:
            - update
            - reset
            - init
          description: "What to do with baseline in this build"
      - default-parameters
    disabled: false
    node: tcwg-x86_64-build
    concurrent: false
    display-name: 'TCWG Build tcwg_kernel/{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
    workspace: workspace/tcwg_kernel_$EXECUTOR_NUMBER
    scm:
      - jenkins-scripts
#if TOOLCHAIN_llvm
      - clang-scm:
          llvm_url: '{llvm_url}'
          llvm_branch: '{llvm_branch}'
#elif TOOLCHAIN_gnu
      - binutils-scm:
          binutils_url: '{binutils_url}'
          binutils_branch: '{binutils_branch}'
      - gcc-scm:
          gcc_url: '{gcc_url}'
          gcc_branch: '{gcc_branch}'
#endif
      - linux-scm:
          linux_url: '{linux_url}'
          linux_branch: '{linux_branch}'
    triggers:
      - pollscm:
          cron: 'H H * * *'
    wrappers:
      - timeout:
          timeout: 600
      - timestamps
      - ssh-agent-credentials:
          # tcwg-buildslave user id
          users:
            - 'e0958a95-204f-4c14-a66c-5e2be6c5d50a'
    builders:
      - shell:
          command: |
            #!/bin/bash
            set -ex
            # Delete artifacts now to avoid re-using stale artifacts if
            # below docker-run.sh fails to start up a container.
            rm -rf artifacts/
            mkdir -p artifacts/jenkins
            build_name="#$BUILD_NUMBER"
            branch_opt=""
            # 1 to skip jenkins-scripts
            i=1
            for c in {components}; do
              eval "u=\$$$${{c}}_url"
              eval "b=\$$$${{c}}_branch"
              if [ x"$b" = x"default" ]; then
                eval "b=\$GIT_COMMIT_$i"
              fi
              if [ x"$b" != x"baseline" ]; then
                build_name="$build_name-$c"
                branch_opt="$branch_opt ==rr[${{c}}_url] $u ==rr[${{c}}_branch] $b"
              fi
              i=$(($i+1))
            done

            ./jenkins-scripts/docker-run.sh \
            --distro $distro \
            -- \
            ./jenkins-scripts/tcwg_kernel-build.sh \
            %% artifacts/jenkins/manifest.sh \
            --BUILD_URL "$BUILD_URL" \
            ==rr[ci_project] $ci_project \
            ==rr[ci_config] $ci_config \
            $branch_opt \
            ==rr[mode] "jenkins-full" \
            ==rr[update_baseline] "$update_baseline" &
            res=0 && wait $! || res=$?

            if [ $res != 0 ]; then
              touch artifacts/failures
            fi

            if [ -e artifacts/results ]; then
              build_name="$build_name-R$(tail -n1 artifacts/results)"
            fi
            if [ x"$update_baseline" != x"update" ]; then
              build_name="$build_name-$update_baseline"
            fi
            if [ -f artifacts/trigger-bisect ]; then
              build_name="$build_name-bisect"
            fi
            echo "$build_name" > artifacts/jenkins/build-name
      - trigger-followup-builds:
          rr_project: 'tcwg_kernel-#{TOOLCHAIN}'
          ci_project_config: '{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
      - shell: |
          #!/bin/bash
          if [ -f artifacts/failures ]; then
            exit 1
          fi
    publishers:
        - archive:
            artifacts: 'artifacts/**'
            latest-only: false

- job-template:
    name: tcwg_kernel-#{TOOLCHAIN}-bisect-{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}
    project-type: freestyle
    defaults: global
    properties:
      - default-properties
      - build-blocker:
          # Run at most 1 bisect job for all configurations.
          # Bisect jobs can easily run for 5+ hours, and a few of them
          # can hog the entire TCWG build farm for a long time.  Since
          # same regression tends to appear in multiple configurations,
          # run bisections for all configurations in-order.
          blocking-jobs:
            - "tcwg_kernel-.*-bisect-.*"
          queue-scanning: 'BUILDABLE'
    parameters:
      - string:
          name: ci_project
          default: 'tcwg_kernel'
          description: "CI project ID; used as namespace for git branches"
      - string:
          name: ci_config
          default: '{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
          description: "CI configuration ID"
      - string:
          name: current_project
          default: ""
          description: "Project to bisect"
      - string:
          name: bad_url
          default: ""
          description: "Bad git URL"
      - string:
          name: bad_branch
          default: ""
          description: "Bad branch or sha1"
      - default-parameters
    disabled: false
    node: tcwg-x86_64-build
    concurrent: false
    display-name: 'TCWG Bisect tcwg_kernel/{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
    workspace: workspace/tcwg_kernel_$EXECUTOR_NUMBER
    scm:
      - jenkins-scripts
    wrappers:
      - timeout:
          timeout: 1440
      - timestamps
      - ssh-agent-credentials:
          # tcwg-buildslave user id
          users:
            - 'e0958a95-204f-4c14-a66c-5e2be6c5d50a'
      - credentials-binding:
          - text:
              credential-id: TCWG_JIRA_PASSWORD
              variable: TCWG_JIRA_PASSWORD
    builders:
        - shell: |
            #!/bin/bash
            set -ex
            # Delete artifacts now to avoid re-using stale artifacts if
            # below docker-run.sh fails to start up a container.
            rm -rf artifacts/
            mkdir -p artifacts/jenkins
            build_name="#$BUILD_NUMBER-$current_project"
            echo "$build_name" > artifacts/jenkins/build-name
            # artifacts/jenkins/mail-*.txt will be overwritten in successful builds.
            echo "maxim.kuvyrkov@linaro.org" > artifacts/jenkins/mail-recipients.txt
            echo "Build $BUILD_URL failed" > artifacts/jenkins/mail-body.txt

            ./jenkins-scripts/docker-run.sh \
            --distro $distro \
            -- \
            ./jenkins-scripts/round-robin-bisect.sh \
            %% artifacts/manifests/bisect.sh \
            --BUILD_URL "$BUILD_URL" \
            --current_project "$current_project" \
            --bad_url "$bad_url" \
            --bad_branch "$bad_branch" \
            --build_script "./jenkins-scripts/tcwg_kernel-build.sh" \
            --JIRA_PASSWORD "$TCWG_JIRA_PASSWORD" \
            -- \
            ==rr[ci_project] $ci_project \
            ==rr[ci_config] $ci_config

            if [ x"$mail_recipients" != x"default" ]; then
              echo "$mail_recipients" > artifacts/jenkins/mail-recipients.txt
            fi
        - trigger-followup-builds:
            rr_project: 'tcwg_kernel-#{TOOLCHAIN}'
            ci_project_config: '{toolchain_name}-{toolchain_ver}-{target}-{linux}-{linux_config}'
    publishers:
        - archive:
            artifacts: 'artifacts/**'
            latest-only: false
        - email-ext:
            recipients: ${{FILE,path="artifacts/jenkins/mail-recipients.txt"}}
            content-type: text
            body: |
              ${{FILE,path="artifacts/jenkins/mail-body.txt"}}
            failure: true
            success: true
            send-to:
              - recipients
